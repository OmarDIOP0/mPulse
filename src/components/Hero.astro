---
import s1 from "../assets/app/dashboard.jpg";
import s2 from "../assets/app/caisse.jpg";
import s3 from "../assets/app/depense.jpg";
import s4 from "../assets/app/ecommerce1.jpg";
import s5 from "../assets/app/autre.jpg";
import AppStore from '../assets/icons/app-store.png';
import GooglePlay from '../assets/icons/play-store.png';

const screens = [s1, s2, s3, s4, s5].filter(Boolean);
---

<section id="hero" class="relative py-16 md:py-24 bg-white overflow-hidden text-[#0b2647]">
  <!-- Bande/halo jaune côté BAS -->
  <div class="pointer-events-none absolute inset-x-0 bottom-0 h-[30%] md:h-[25%]">
    <div class="absolute inset-0 bg-gradient-to-t from-[#ffd100]/60 via-[#ffd100]/30 to-transparent"></div>
    <div class="absolute left-1/2 -translate-x-1/2 -bottom-20 w-[520px] h-[520px] bg-[#ffd100]/20 rounded-full blur-3xl"></div>
  </div>

  <!-- Cercles doux bleus -->
  <div class="pointer-events-none absolute -bottom-40 -left-40 w-[560px] h-[560px] bg-[#00377d]/10 rounded-full blur-3xl"></div>

  <div class="container mx-auto px-6 relative z-10">
    <div class="flex flex-col lg:flex-row items-center gap-12">
      <!-- Texte -->
      <div class="lg:w-1/2 text-center lg:text-left">
        <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold leading-tight mb-6">
          Maîtrisez votre <span class="text-[#00377d]">budget</span> avec <span class="text-[#ffd100]">mPulse</span>
        </h1>
        <p class="text-lg md:text-xl text-[#0b2647]/80 mb-8 leading-relaxed">
          La solution intelligente pour une gestion financière claire et sans stress
        </p>

        <!-- Badges -->
        <div class="flex flex-col sm:flex-row justify-center lg:justify-start gap-4 mb-10">
          <a href="#" class="inline-flex items-center justify-center px-6 py-3 bg-gray-900 text-white rounded-xl hover:opacity-90 transition-opacity shadow-md hover:shadow-lg">
            <!-- <svg class="w-8 h-8 mr-3" viewBox="0 0 24 24" fill="currentColor"><path d="M17.924 17.315c-.057.174-.193.332-.348.367-.156.035-.343-.047-.483-.197-1.405-1.566-3.57-1.95-5.095-1.94-1.525.01-3.122.49-4.265 1.33-.299.218-.595.227-.793.157-.197-.07-.384-.247-.45-.525-.066-.279-.01-.599.162-.921 1.336-2.437 3.886-3.665 6.9-3.665 2.996 0 5.32 1.31 6.56 3.748.173.321.225.642.158.921z"/></svg> -->
            <img src={GooglePlay.src} alt="Google Play" class="w-8 h-8 mr-3"/>
            <span class="text-left"><span class="block text-xs">Télécharger sur</span>
            <span class="block text-lg font-semibold">Google Play</span>
          </a>
          <a href="https://testflight.apple.com/join/gRS2JbmQ" target="_blank" class="inline-flex items-center justify-center px-6 py-3 bg-gray-900 text-white rounded-xl hover:opacity-90 transition-opacity shadow-md hover:shadow-lg">
            <!-- <svg class="w-8 h-8 mr-3" viewBox="0 0 24 24" fill="currentColor"><path d="M17.924 17.315c-.057.174-.193.332-.348.367-.156.035-.343-.047-.483-.197-1.405-1.566-3.57-1.95-5.095-1.94-1.525.01-3.122.49-4.265 1.33-.299.218-.595.227-.793.157-.197-.07-.384-.247-.45-.525-.066-.279-.01-.599.162-.921 1.336-2.437 3.886-3.665 6.9-3.665 2.996 0 5.32 1.31 6.56 3.748.173.321.225.642.158.921z"/></svg> -->
            <img src={AppStore.src} alt="App Store" class="w-8 h-8 mr-3"/>
            <span class="text-left"><span class="block text-xs">Télécharger sur</span>
            <span class="block text-lg font-semibold">App Store</span></span>
          </a>
        </div>

        <div class="hidden lg:flex items-center text-sm text-[#0b2647]/70 animate-bounce">
          <span class="mr-2"><a href="#fonctionnalites" class="mr-2">Faites défiler</a>
        </span>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"/></svg>
        </div>
      </div>

      <!-- Visuel app / Stacks -->
      <div class="lg:w-1/2 flex justify-center">
        <div class="relative w-80">
          <!-- Glow -->
          <div class="absolute -inset-8 bg-gradient-to-br from-[#ffd100]/25 via-transparent to-transparent rounded-[44px] blur-2xl"></div>

          <!-- Téléphone -->
          <div class="relative bg-gray-900 rounded-[40px] p-3 shadow-2xl border-[14px] border-gray-900">
            <div class="absolute top-0 left-1/2 -translate-x-1/2 w-40 h-6 bg-gray-900 rounded-b-2xl z-10"></div>

            <div class="relative h-[600px] rounded-[30px] overflow-hidden isolate" id="screen-stack" aria-label="Aperçu de l'application ENCUBE">
              <!-- Fond ENCUBE -->
              <div class="absolute inset-0 bg-gradient-to-b from-[#00377d] to-[#002a5a]"></div>

              <!-- Pile d'écrans -->
              {screens.map((src, i) => (
                <img src={src.src} alt={`Capture ${i+1}`} loading={i===0? 'eager':'lazy'}
                     class={`stack-shot absolute inset-0 w-full h-full object-cover opacity-0 translate-y-6 scale-[1.03] will-change-transform transition-[opacity,transform,filter] duration-700 ${i===0? 'is-active':''}`}
                     style={`--i:${i};`} />
              ))}

              <!-- Voile verre -->
              <div class="pointer-events-none absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-white/5 mix-blend-soft-light"></div>
            </div>
          </div>

          <!-- Dots -->
          <div class="mt-6 flex justify-center gap-2" id="stack-dots" role="tablist" aria-label="Navigation des captures">
            {screens.map((_, i) => (
              <button class={`dot w-2.5 h-2.5 rounded-full bg-gray-300 aria-selected:bg-[#00377d]`} role="tab" aria-selected={i===0? 'true':'false'} aria-controls={`cap-${i}`} data-index={i} />
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Tilt/parallax via variables CSS */
  #screen-stack{ transform: perspective(1200px) rotateX(var(--rx,0deg)) rotateY(var(--ry,0deg)); transition: transform .2s ease-out; }
  .stack-shot.is-active{ opacity:1; transform: translateY(0) scale(1); filter:saturate(1.04) contrast(1.02); }

  /* Animation de flottement pour le téléphone */
  @keyframes float {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    33% { transform: translateY(-10px) rotate(1deg); }
    66% { transform: translateY(5px) rotate(-1deg); }
  }
  
  .relative.w-80 {
    animation: float 8s ease-in-out infinite;
  }

  /* Réduction de mouvement */
  @media (prefers-reduced-motion: reduce){
    .stack-shot{ transition:none !important }
    #screen-stack{ transition:none !important }
    .relative.w-80 { animation: none; }
  }
</style>

<script>
  /**
   * Animation "Stacks" CORRIGÉE:
   * - Auto-play + contrôle dots + swipe/drag
   * - Code JavaScript fonctionnel
   */
  document.addEventListener('DOMContentLoaded', () => {
    const section = document.getElementById('hero');
    const stack = document.getElementById('screen-stack');
    const shots = stack ? Array.from(stack.querySelectorAll('.stack-shot')) : [];
    const stackDotsEl = document.getElementById('stack-dots');
    const dots = stackDotsEl ? Array.from(stackDotsEl.querySelectorAll('.dot')) : [];

    if (shots.length > 0) {
      let idx = 0;
      let autoplay = true;
      let rafId = 0;
      const D = 4500; // ms

      const setActive = (i: number) => {
        idx = (i + shots.length) % shots.length;
        shots.forEach((el, k) => el.classList.toggle('is-active', k === idx));
        dots.forEach((d, k) => d.setAttribute('aria-selected', k === idx ? 'true' : 'false'));
      };

      // Auto-play
      let t0 = performance.now();
      const tick = (t: number) => {
        if (!autoplay) { 
          t0 = t; 
          rafId = requestAnimationFrame(tick); 
          return; 
        }
        if (t - t0 >= D) { 
          setActive(idx + 1); 
          t0 = t; 
        }
        rafId = requestAnimationFrame(tick);
      };
      rafId = requestAnimationFrame(tick);

      // Dots
      dots.forEach((b, i) => {
        b.addEventListener('click', () => {
          autoplay = false;
          setActive(i);
          setTimeout(() => { autoplay = true; }, 3000);
        });
      });

      // Scroll-driven
      const onScroll = () => {
        if (!section) return;
        const r = section.getBoundingClientRect();
        const vh = window.innerHeight || document.documentElement.clientHeight;
        const total = r.height + vh;
        const passed = vh - r.top;
        const p = Math.max(0, Math.min(1, passed / total));
        const i = Math.floor(p * (shots.length - 0.0001));
        if (i !== idx) setActive(i);
      };
      window.addEventListener('scroll', onScroll, { passive: true });

      // Tilt/parallax
      if (stack) {
        const onMove = (e: MouseEvent) => {
          const rect = stack.getBoundingClientRect();
          const cx = rect.left + rect.width / 2;
          const cy = rect.top + rect.height / 2;
          const dx = ((e.clientX || cx) - cx) / (rect.width / 2);
          const dy = ((e.clientY || cy) - cy) / (rect.height / 2);
          const max = 6;
          stack.style.setProperty('--ry', `${-dx * max}deg`);
          stack.style.setProperty('--rx', `${dy * max}deg`);
        };
        
        stack.addEventListener('mousemove', onMove);
        stack.addEventListener('mouseleave', () => { 
          stack.style.setProperty('--ry', '0deg'); 
          stack.style.setProperty('--rx', '0deg'); 
        });

        // Swipe/drag
        let dragging = false;
        let startX = 0;
        
        const start = (x: number) => { 
          dragging = true; 
          startX = x; 
          autoplay = false; 
        };
        
        const end = (x:number) => {
          if (!dragging) return;
          dragging = false;
          
          const dx = x - startX;
          const th = 30; // px
          
          if (dx > th) {
            setActive(idx - 1);
          } else if (dx < -th) {
            setActive(idx + 1);
          }
          
          setTimeout(() => { autoplay = true; }, 3000);
        };
        
        stack.addEventListener('pointerdown', (e) => { 
          stack.setPointerCapture(e.pointerId); 
          start(e.clientX); 
        });
        
        stack.addEventListener('pointerup', (e) => end(e.clientX));
        stack.addEventListener('pointercancel', (e) => end(e.clientX));

        // Accessibilité: pause au survol
        stack.addEventListener('mouseenter', () => autoplay = false);
        stack.addEventListener('mouseleave', () => autoplay = true);
      }

      // Reduced motion
      if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
        autoplay = false;
      }
    }
  });
</script>